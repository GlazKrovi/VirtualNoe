@startuml VirtualNoe

!theme reddress-darkgreen

package Models
{
    interface IUser {
        + name() : String
        + password() : String
        + email() : String
    }

    interface IPlayer extends IUser
    {
        +  level() : Integer
        +  money() : Integer
        +  items()
        +  creatures() : HasMany
        +  setLevel(level : Integer)
        +  setMoney(money : Integer)
    }
    IPlayer" 1 " o--> " * "IItem : has
    IPlayer" 1 " o--> " * "ICreature : has

    class User implements IPlayer
    {
        + {static} createWithItems(data : Any[*])
        + name() : String
        + password() : String
        + level() : Integer
        + money() : Integer
        + items()
        + creatures() : HasMany
        + setLevel(level : Integer)
        + setMoney(money : Integer)
        # foods()
        # boosts()
    }

    interface IItem
    {
        + id() : Integer
        + name() : String
        + type() : String
        + price() : Integer
        + users() : BelongsToMany /' get owners '/
    }

    abstract class Item implements IItem
    {
        + id() : Integer
        + name() : String
        + type() : String
        + price() : Integer
        + users()
    }

    interface IFood implements IItem
    {
        /' number of points added to hunger gauge '/
        + calories() : Integer
    }

    class Food extends Item implements IFood
    {
        + calories() : Integer
    }

    interface IBoost implements IItem
    {
        /' number of points added to stamina gauge '/
        + energy() : Integer
    }

    class Boost extends Item implements IBoost
    {
        + energy() : Integer
    }

    interface IDrug implements IItem
    {
        /' number of points added to life gauge '/
        + healing() : Integer
    }

    interface ICreature
    {
        + id() : Integer
        + name() : String
        + life() : Integer
        + level() : Integer
        + hunger() : Integer
        + stamina() : Integer
        + species() : String
        + setLife(life : Integer)
        + setLevel(level : Integer)
        + setHunger(hunger : Integer)
        + setStamina(stamina : Integer)
        + user() : BelongsTo
        + texture() : String
    }

    class Creature implements ICreature
    {
        + {readonly} MAX_LEVEL = 1000
        + {readonly} MAX_LIFE = 100
        + {readonly} MAX_STAMINA = 100
        + {readonly} MAX_HUNGER = 100
        + id() : Integer
        + name() : String
        + life() : Integer
        + level() : Integer
        + hunger() : Integer
        + stamina() : Integer
        + species() : String
        + setLife(life : Integer)
        + setLevel(level : Integer)
        + setHunger(hunger : Integer)
        + setStamina(stamina : Integer)
        + user() : BelongsTo
        + texture() : String
    }
}

package Controllers
{
    class LogController
    {
        +  show()
        +  showAll()
    }

    class InventoryController   /' use IPlayer '/
    {
        + show(message : String)
        + use(creatureId : Integer, itemId : Integer, type : String)
        + quantityOf(player : IPlayer, item : Item): Integer
        + add(player : IPlayer, item : Item, quantity : Integer)
        + remove(player : IPlayer, item : Item, quantity : Integer)
    }
    InventoryController" 1 " ..> " * "IPlayer : <<use>>
    InventoryController" 1 " ..> " * "IItem : <<use>>

    class UserController {
        + connect(Request $request)
        + create(Request $request)
        + updatePassword(Request $request)
        + delete(Request $request)
        + disconnect()
        + forget(Request $request)
    }
    UserController ..> IUser : controls

    class PlayerController {
        + levelUp(Request $request)
        + earn(Request $request)
        + lose(Request $request)
    }
    PlayerController ..> IPlayer : controls

    class CreatureController
    {
        + index() : Collection
        + create()
        + store(Request $request)
        + show(Creature $creature)
        + edit(Creature $creature)
        + update(Request $request, Creature $creature)
        + destroy(Creature $creature)
        + feed(Integer $creatureId, Integer $calories)
        + boost(Integer $creatureId
    }
    CreatureController ..> ICreature : controls

}

@enduml